---
import ThemeToggle from "./ThemeToggle.astro";

const navItems = [
  { title: "Presentación", label: "presentación", url: "/#presentación" },
  { title: "Experiencia", label: "experiencia", url: "/#experiencia" },
  { title: "Skills", label: "skills", url: "/#skills" },
  { title: "Proyectos", label: "proyectos", url: "/#proyectos" },
  { title: "Cursos", label: "cursos", url: "/#cursos" },
  { title: "Sobre mí", label: "sobre-mi", url: "/#sobre-mi" },
];
---

<header class="fixed top-2 md:top-4 z-50 w-full px-4">
  <div
    class="flex justify-between items-center
  bg-white/10 dark:bg-blue-900/40 backdrop-blur-md
  rounded-full px-3 py-1 md:px-4 md:py-1
  shadow-md border border-white/20 dark:border-cyan-400/30
  text-xs md:text-sm font-semibold
  text-gray-700 dark:text-cyan-300
  transition-all duration-300 max-w-4xl mx-auto"
  >
    <nav class="hidden md:flex gap-3 font-mono max-w-full">
      {
        navItems.map((link) => (
          <a
            href={link.url}
            aria-label={link.label}
            class="relative px-3 py-1 rounded-md transition text-gray-900 dark:text-cyan-300 hover:text-blue-600 dark:hover:text-cyan-200 whitespace-nowrap"
          >
            {link.title}
            <span
              aria-hidden="true"
              class="absolute bottom-0 left-1/2 transform -translate-x-1/2 h-[2px] w-0 bg-blue-600 dark:bg-cyan-200 transition-all duration-300 rounded"
            />
          </a>
        ))
      }
    </nav>

    <div class="flex items-center justify-between w-full">
      <button
        id="menu-toggle"
        class="md:hidden text-gray-900 dark:text-cyan-300 focus:outline-none"
      >
        <svg
          class="w-6 h-6"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>

      <div class="ml-auto">
        <ThemeToggle />
      </div>
    </div>
  </div>

  <div
    id="mobile-menu"
    class="md:hidden mt-2 hidden bg-white/90 dark:bg-blue-900/80 backdrop-blur-lg rounded-xl shadow-lg p-4 space-y-2 text-sm font-mono text-gray-800 dark:text-cyan-200"
  >
    {
      navItems.map((link) => (
        <a
          href={link.url}
          aria-label={link.label}
          class="block px-2 py-1 rounded-md hover:bg-blue-100 dark:hover:bg-blue-800 transition"
        >
          {link.title}
        </a>
      ))
    }
  </div>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            const indicator = item.querySelector("span");
            if (item.getAttribute("aria-label") === entry.target.id) {
              item.classList.add("text-cyan-400", "dark:text-cyan-200");
              item.classList.remove("text-gray-700", "dark:text-cyan-300");
              if (indicator) indicator.style.width = "50%";
            } else {
              item.classList.remove("text-cyan-400", "dark:text-cyan-200");
              item.classList.add("text-gray-700", "dark:text-cyan-300");
              if (indicator) indicator.style.width = "0";
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => observer.observe(section));

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") observer.disconnect();
      else sections.forEach((section) => observer.observe(section));
    };
  });
</script>

<script>
  document.addEventListener("astro:page-load", () => {
    const toggleBtn = document.getElementById("menu-toggle");
    const menu = document.getElementById("mobile-menu");

    toggleBtn?.addEventListener("click", () => {
      menu?.classList.toggle("hidden");
    });
  });
</script>

<style>
  header nav a {
    cursor: pointer;
  }

  header nav a:hover span {
    width: 50% !important;
  }
</style>
