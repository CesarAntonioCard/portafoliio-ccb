---
import SunIcon from "./icons/dark-light/Sun.astro";
import MoonIcon from "./icons/dark-light/Moon.astro";
import SystemIcon from "./icons/System.astro";

const THEMES = ["Light", "Dark", "System"];
---

<div class="relative ml-1 mr-1">
  <button
    id="theme-toggle-btn"
    class="appearance-none border-none flex items-center justify-center
      w-10 h-10 rounded-full
      bg-white/20 dark:bg-blue-900/50
      backdrop-blur-md
      shadow-md
      hover:scale-110 hover:bg-white/30 dark:hover:bg-blue-800/70
      transition
      relative
      overflow-hidden"
    aria-label="Elige el tema"
    title="Elige el tema"
  >
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    <MoonIcon
      id="dark"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
    <SystemIcon
      id="system"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
  </button>

  <div
    id="themes-menu"
    class="absolute right-0 top-12
      hidden
      min-w-[8rem]
      rounded-lg
      border border-gray-200 dark:border-cyan-600/70
      bg-white/90 dark:bg-blue-900/80
      backdrop-blur-lg
      shadow-lg
      text-sm
      z-50
      overflow-hidden"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li
            class="
            px-4 py-2 cursor-pointer
            hover:bg-cyan-200/40 dark:hover:bg-cyan-400/30
            transition-colors
            select-none
            text-gray-700 dark:text-cyan-300
          "
          >
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: block;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  .theme-toggle-icon {
    width: 1.25rem;
    height: 1.25rem;
    color: #2269ee;
    transition:
      transform 0.3s ease,
      opacity 0.3s ease;
  }
</style>

<script is:inline>
  let removeListener = null;
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById("themes-menu");
  const themeToggleBtn = document.getElementById("theme-toggle-btn");

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system";
    }
    return matchMedia.matches ? "dark" : "light";
  };

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((el) => {
      el.style.transform = el.id === themePreference ? "scale(1)" : "scale(0)";
      el.style.opacity = el.id === themePreference ? "1" : "0";
      el.style.position = el.id === themePreference ? "static" : "absolute";
    });
  };

  const updateTheme = () => {
    if (removeListener !== null) {
      removeListener();
    }
    matchMedia.addEventListener("change", updateTheme);
    removeListener = () => {
      matchMedia.removeEventListener("change", updateTheme);
    };

    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches);

    updateIcon(themePreference);
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  };

  updateTheme();

  document.addEventListener("click", () => themesMenu.classList.remove("open"));

  themeToggleBtn.addEventListener("click", (e) => {
    e.stopPropagation();
    themesMenu.classList.toggle("open");
  });

  document
    .querySelectorAll(".themes-menu-option, #themes-menu li")
    .forEach((el) => {
      el.addEventListener("click", (e) => {
        localStorage.setItem("theme", e.target.innerText.toLowerCase().trim());
        updateTheme();
        themesMenu.classList.remove("open");
      });
    });

  document.addEventListener("astro:after-swap", () => {
    updateTheme();
    window.scrollTo({ left: 0, top: 0, behavior: "instant" });
  });
</script>
